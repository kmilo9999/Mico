#version 430 core
layout(triangles_adjacency) in;
layout(triangle_strip, max_vertices = 18) out;

// constant values for the whole mesh.

uniform mat4 ViewMatrix;
uniform mat4 ProjectionMatrix;
uniform mat4 ModelMatrix;
uniform vec3 ViewPos;
uniform mat4 ViewInverse;

uniform int showModel;

float edgeLenght = 0.01;

in VertexData
{
    vec3 normal;
	vec2 textCoord;
} vertex[];

out FragmentVertexData
{
    vec3 normal;
	vec3 fragpos;
	vec2 texCoord;
	flat int edgeFlag; 
} VertexOut;
 

void main(){

 
  vec3 P0 = vec3(ModelMatrix * gl_in[0].gl_Position);
  vec3 P1 = vec3(ModelMatrix * gl_in[2].gl_Position);
  vec3 P2 = vec3(ModelMatrix * gl_in[4].gl_Position);

  vec3 V0 = P1 - P0;
  vec3 V1 = P2 - P0;
  vec3 triangleNormal = cross( V1, V0);
  triangleNormal  =  normalize(triangleNormal);

  // Center of the triangle
  vec3 triangleCentroid = (P0+P1+P2) / 3.0;


  //vec3 cameraPos = normalize((ViewInverse *vec4(0,0,0,1)).xyz);
  vec3 cameraPos = ViewPos;
  vec3 viewDir = normalize( triangleCentroid - cameraPos   );

  // front-facing ?
  if(dot(viewDir,triangleNormal ) <=0)
  {
	    // check adjancent triangles
		for(int i = 0; i < 6; i += 2)
		{
		   int iNextTri = (i+2)%6;
		   vec3 V1 = vec3(ModelMatrix * gl_in[i].gl_Position);
           vec3 V2 = vec3(ModelMatrix * gl_in[i+1].gl_Position);
		   vec3 V3 = vec3(ModelMatrix * gl_in[iNextTri].gl_Position);
		   
		   vec3 adjV0 = normalize(V2 - V1);
		   vec3 adjV1 = normalize(V3 - V1);
		   vec3 adjTriangleNormal = cross( adjV1,adjV0);
		   adjTriangleNormal  =  normalize(adjTriangleNormal);

		   vec3 adjTriangleCentroid = (V1+V2+V3) / 3.0;
		   vec3 adjViewDir = normalize(   adjTriangleCentroid - cameraPos );

		   vec3 edv1 = vec3(0);
		   vec3 edv2 = vec3(0);

		    // back-facing ?
			float dotView = dot(adjViewDir, adjTriangleNormal);
	        if(dotView >= 0)
			{
			  vec3 fragNormal =normalize( mat3(transpose(inverse(ModelMatrix))) * vertex[i].normal);
			  vec3 adjFragNormal = normalize(mat3(transpose(inverse(ModelMatrix))) * vertex[iNextTri].normal);
			  vec4 adjPos = ModelMatrix * gl_in[iNextTri].gl_Position;

			  // extra triangles to complete the geometry
			  
			 // vec2 s0 = vec2(ProjectionMatrix * ViewMatrix * vec4(V1,1));
			 // vec2 n0 = vec2(ProjectionMatrix * ViewMatrix * vec4(vertex[i].normal,1));
			 // vec2 s1 = normalize(vec2(ProjectionMatrix * ViewMatrix * adjPos));
			 // vec2 n1 = normalize(vec2(ProjectionMatrix * ViewMatrix * vec4(vertex[iNextTri].normal,1)));
			//  vec2 p =  normalize(vec2(s0.y - s1.y,s1.x - s0.x));
			 // vec2 m0 = normalize((ProjectionMatrix * ViewMatrix * vec4(V1 + fragNormal,1)).xy- s0);
			//  vec2 m1 = normalize((ProjectionMatrix * ViewMatrix * vec4(adjPos.xyz + adjFragNormal,1)).xy - s1);

			  
			 //  gl_Position = vec4(s0 + m0 ,0,1);
			 //  VertexOut.edgeFlag = 2;
			 //  EmitVertex();
			  // float mySign = sign(dot(m0, p));
			 ////  vec2 posi0 = s0 + ( p * mySign);
			  // gl_Position = vec4(posi0,0,1);
			  // VertexOut.edgeFlag = 2;
			//   EmitVertex();
			//   gl_Position = vec4(s0,0,1);
			//   VertexOut.edgeFlag = 2;
			 //  EmitVertex();

			 //  EndPrimitive();

			  for(int adjv1 = 1 ; adjv1 >= 0; adjv1--)
			  {
				vec3 wsPos = V1 + adjv1 * fragNormal * edgeLenght;
				VertexOut.fragpos = wsPos;
				VertexOut.normal = fragNormal;
				VertexOut.edgeFlag = 1;
				gl_Position = ProjectionMatrix * ViewMatrix * vec4(wsPos,1);
				EmitVertex();
			  }
			  
			  edv1 = V1 + fragNormal * edgeLenght;

			 
			  for(int adjv2 = 1; adjv2 >= 0; adjv2--)
			  {
				 vec3 wsPos = adjPos.xyz + adjv2 * adjFragNormal * edgeLenght;
				 VertexOut.fragpos = wsPos;
				 VertexOut.normal = adjFragNormal;
				 VertexOut.edgeFlag = 1;
				 gl_Position = ProjectionMatrix * ViewMatrix * vec4(wsPos,1);
				 EmitVertex();
			  }

			   EndPrimitive();

			   //edv2 = adjPos.xyz + adjFragNormal* edgeLenght;

			
			  /*gl_Position =  vec4(s1 + m1 * edgeLenght,1,1);
			   VertexOut.edgeFlag = 2;
			   EmitVertex();
			   float mySign1 = sign(dot(m1, p));
			   vec2 posi1 = s1 + ( p * mySign1);
			   gl_Position = vec4(posi1,1.0f,1.0f);
			   VertexOut.edgeFlag = 2;
			   EmitVertex();
			   gl_Position = vec4(s1,1,1);
			   VertexOut.edgeFlag = 2;
			   EmitVertex();
			   
			   EndPrimitive();*/
			 
			  
			}
		}



  }
  
   if(showModel == 1)
   {
   
    for (int i = 0; i < 6; i += 2)
	 {
			vec4 fragPos      = ModelMatrix * gl_in[i].gl_Position;
			VertexOut.normal  = mat3(transpose(inverse(ModelMatrix))) * vertex[i].normal;
			VertexOut.fragpos = fragPos.xyz;
			VertexOut.edgeFlag = 0;
			gl_Position       = ProjectionMatrix * ViewMatrix * fragPos;
			EmitVertex();
	 }
	 EndPrimitive();
   }
 

  


}