#version 430 core
layout(triangles_adjacency) in;
layout(line_strip, max_vertices = 6) out;

//layout(triangles) in;
//layout(line_strip, max_vertices = 14) out;

uniform mat4 ModelMatrix;
uniform mat4 ViewMatrix;
uniform mat4 ProjectionMatrix;

in Vertex
{
  vec3 normal;
} vertex[];

out vec4 myColor;

void main(){
  
  
  vec3 P0 = gl_in[0].gl_Position.xyz;
  vec3 P1 = gl_in[2].gl_Position.xyz;
  vec3 P2 = gl_in[4].gl_Position.xyz;
  

  vec3 V0 = P1 - P0;
  vec3 V1 = P2 - P0;
  
  // Center of the triangle
  //vec3 P = (P0+P1+P2) / 3.0;

  vec3 N = cross(V0, V1);
  
  N = normalize(N);
  for(int i=0; i<gl_in.length(); i++)
  {
    vec3 P = gl_in[i].gl_Position.xyz;
    //vec3 N =  vertex[i].normal.xyz;
	
    gl_Position = ProjectionMatrix * ViewMatrix * ModelMatrix  * vec4(P, 1.0);
    EmitVertex();
    
    gl_Position = ProjectionMatrix * ViewMatrix * ModelMatrix  * vec4(P + N * 2, 1.0);
    EmitVertex();
    
    EndPrimitive();
  }





}
