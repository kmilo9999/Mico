#version 430 core
layout(triangles) in;
layout(line_strip, max_vertices = 2) out;

uniform mat4 ModelMatrix;
uniform mat4 ViewMatrix;
uniform mat4 ProjectionMatrix;

/*in Vertex
{
  vec3 normal;
} vertex[];*/

void main(){
  
   /*for(int i=0; i<gl_in.length(); i++)
  {
    vec3 P = gl_in[i].gl_Position.xyz;
    vec3 N = vertex[i].normal.xyz;
    
    gl_Position = ProjectionMatrix * ViewMatrix * ModelMatrix  * vec4(P, 1.0);
    EmitVertex();
    
    gl_Position = ProjectionMatrix * ViewMatrix * ModelMatrix  * vec4(P + N * 0.003, 1.0);
    EmitVertex();
    
    EndPrimitive();
  }*/


  vec3 P0 = gl_in[0].gl_Position.xyz;
  vec3 P1 = gl_in[1].gl_Position.xyz;
  vec3 P2 = gl_in[2].gl_Position.xyz;

  vec3 V0 = P1 - P0;
  vec3 V1 = P2 - P0;
  vec3 N = cross(V0, V1);
  
  //N = normalize(N);
  // Center of the triangle
  vec3 P = (P0+P1+P2) / 3.0;
  gl_Position =  ProjectionMatrix * ViewMatrix * ModelMatrix  * vec4(P, 1.0);
  EmitVertex();

  gl_Position = ProjectionMatrix * ViewMatrix * ModelMatrix * vec4(P + N * 10.0f, 1.0);
  EmitVertex();
  EndPrimitive();

}
