#version 430 core

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};


uniform Material material;
uniform Light light;

in vec2 TextCoord;
in vec3 norm;
in vec3 FragPos;

uniform bool hasTexture;

out vec4 color;
uniform sampler2D textureColor;
uniform float AmbientFactor;
uniform float LightIntensity;
uniform vec3 LightPos;
uniform vec3 LightColor;
uniform vec3 ViewPos;
uniform bool isGround;

uniform int numShades;

void main(){
  
  
  // color of the object
  vec3 objectColor = vec3(1.0f, 0.5f, 0.31f);


  // color from the texture
  if(hasTexture)
  {
        if(isGround)
		{
			objectColor = texture(textureColor, TextCoord).rgb;
		}
  }
  
  // Ambient
  vec3 ambient = light.ambient * material.ambient ;

  // Diffuse
  vec3 normal = normalize(norm);
  vec3 lightDir = normalize(light.position - FragPos);  
  float diff = max(dot(lightDir,normal), 0.0);
  vec3 diffuse = light.diffuse * diff * material.diffuse ;

  // Specular
  vec3 viewDir = normalize(ViewPos - FragPos);
  vec3 reflectDir = reflect(-lightDir, normal);  
  vec3 halfwayDir = normalize(lightDir + viewDir );
  float spec = pow(max(dot(normal, halfwayDir), 0.0), material.shininess);
  vec3 specular = light.specular * spec * material.specular ; 

  
 // Final Color
 //vec3 nColor = (ambient + diffuse + specular) * objectColor;

 float iambi = 0.1; 
 float intensity = iambi + diff + spec ;
 // quantize intensity for cel shading
 float shadeIntensity = ceil(intensity * numShades)/ numShades;
 // use base color
 color = vec4(objectColor*shadeIntensity, 1.0); 
  
}