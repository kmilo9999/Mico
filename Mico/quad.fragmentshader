#version 330 core

  
struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};


in vec2 TexCoords;

// uniform sampler2D screenTexture;
uniform sampler2D positionMap; 
uniform sampler2D normalMap;
uniform sampler2D diffuseMap;
uniform sampler2D specularMap;
uniform sampler2D shininessMap;
uniform sampler2D textureMap;
//uniform sampler2D depthMap;
uniform sampler2D shadowMap;

uniform vec3 ViewPos;
uniform vec3 ambient;
uniform Light light;

uniform float width;
uniform float height;
uniform mat4 ShadowMatrix;


out vec4 fragColor;

bool ShadowCalculation(vec3 position)
{
	vec4 shadowCoord = ShadowMatrix * vec4(position,1);
	vec2 shadowIndex = shadowCoord.xy/shadowCoord.z;
	float lightDepth = 0.0;
	float pixelDepth = 0.0;
	if( (shadowCoord.z > 0.0) && ( (shadowIndex.x > 0.0 && shadowIndex.x < 1.0) && (shadowIndex.y > 0.0 && shadowIndex.y < 1.0) ) ){
		lightDepth = texture(shadowMap, shadowIndex).w;
		pixelDepth = shadowCoord.z;
		if(pixelDepth  > lightDepth){
			return true;
		}
	}

	return false;
}


void main()
{ 
	vec3 finalValue; 
	vec2 texCoord = vec2(gl_FragCoord.x/width,gl_FragCoord.y/height);
    vec3 P = texture2D(positionMap,texCoord).xyz;

	vec3 normal = texture2D(normalMap,texCoord).xyz;
	vec3 eyeVec =  ViewPos - P;
    vec3 lightVec = light.position - P;

	vec3 E =  normalize(eyeVec); 
    vec3 L = normalize(lightVec);
	vec3 N = normalize(normal);

	vec3 Kd =  texture2D(diffuseMap,texCoord).xyz;
    vec3 Ks = texture2D(specularMap,texCoord).xyz;
	float shininess = texture2D(shininessMap,texCoord).r;

	vec3 R = reflect(-lightVec, N);
	vec3 Rn = normalize(R);
    
	vec3 halfwayDir = normalize(L + E );

	float diff = max(dot(L,N), 0.0);
    vec3 diffuse = light.diffuse * diff * Kd;

	float spec = pow(max(dot(N, halfwayDir), 0.0), shininess);
	vec3 specular = light.specular * spec * Ks; 

    bool shadow = ShadowCalculation(P);
	
    if(!shadow)
    {
      fragColor = vec4(ambient + specular + diffuse,1); 
    }
    else
    {
      // I had to multiply by 0.5 because using only the ambient light was not enough to 
      // influence the color of the  occluded pixels
      vec3 nColor = ambient * diffuse * vec3(0.5); 
      fragColor = vec4(nColor,1.0);
    }

	


}