#version 430 core


struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

in vec3 fragmentColor;
in vec2 TextCoord;
in vec3 norm;
in vec3 FragPos;

out vec4 color;

uniform Material material;
uniform Light light;
uniform vec3 ViewPos;
uniform int isGround;

// sampler for 3D texture
//uniform sampler3D u_colorTexture;
uniform sampler2DArray textureArray;


in FragmentVertexData
{
    vec3 normal;
	vec3 fragpos;
	vec2 textCoordC;
	vec2 textCoordA;
	vec2 textCoordB;
	vec2 textCoordG;
	vec3 normalC;
	vec3 normalA;
	vec3 normalB;
	vec3 normalG;
	float blendC;
	float blendA;
	float blendB;
	float blendG;
} vertexOut;


float HatchingIntensity(vec3 normalTriangle, vec3 fragPos, vec3 ligthPosition, vec3 vPos, float shininess)
{
  vec3 normal = normalize(normalTriangle);
  vec3 lightDir = normalize(  ligthPosition -  fragPos );  
  float diff = max(dot(lightDir,normal), 0.0);
  
  // I use light.ambient as default ambient value
  vec3 viewDir = normalize(vPos - fragPos);
  vec3 reflectDir = reflect(-lightDir, normal);
  vec3 halfwayDir = normalize(lightDir - viewDir );
  float spec = pow(max(dot(normal, reflectDir), 0.0), 2);
 
  float lightIntensity = 0;

  if(isGround==1)
  {
   lightIntensity = 0.09 + diff+spec;
   //clamp(0.025 + diff+spec ,0.65,1);

  }
  else
  {
     if(diff < 0.4)
	 {
	   lightIntensity = 0.025 + diff;
	 }
	 else
	 {
	   spec = (spec + 0.1)*5;
	   lightIntensity = 0.025 + diff+spec;
	 }
     
  }

  
  
  // get size of 3D texture
  //vec3 sizeOfTex = textureSize(textureArray, 0);

  // texture coordinates by XY as position of fragment on the screen
  // divided by width of the texture. So each pixel of the texture will
  // correspond to pixel on the screen
  //vec2 texCoordXY = gl_FragCoord.xy/sizeOfTex.x;
  //sample depth of the texture by light intensity
  return lightIntensity ;

} 


void main(){
    
   float texCoordZC = HatchingIntensity(vertexOut.normalC, vertexOut.fragpos, light.position, ViewPos, material.shininess) ;
   float texCoordZA = HatchingIntensity(vertexOut.normalA, vertexOut.fragpos, light.position, ViewPos, material.shininess ) ;
   float texCoordZB = HatchingIntensity(vertexOut.normalB, vertexOut.fragpos, light.position, ViewPos, material.shininess ) ;
   float texCoordZG = HatchingIntensity(vertexOut.normalG, vertexOut.fragpos, light.position, ViewPos, material.shininess ) ;

   float minIntensity = min(texCoordZC,texCoordZA);
   minIntensity = min(minIntensity,texCoordZB);
   minIntensity = min(minIntensity,texCoordZG);

   // sample 3D texture to get hatching intensity
   vec3 hatchingC = texture(textureArray, vec3(vertexOut.textCoordC,texCoordZC)).rgb * vertexOut.blendC;
   vec3 hatchingA = texture(textureArray, vec3(vertexOut.textCoordA,texCoordZA)).rgb * vertexOut.blendA;
   vec3 hatchingB = texture(textureArray, vec3(vertexOut.textCoordB,texCoordZB)).rgb * vertexOut.blendB;
   vec3 hatchingG = texture(textureArray, vec3(vertexOut.textCoordG,texCoordZG)).rgb * vertexOut.blendG;

   vec3 minHatch = min(hatchingC,hatchingA);
   minHatch = min(minHatch,hatchingB);
   minHatch = min(minHatch,hatchingG);

   vec3 maxHatch = max(hatchingC,hatchingA);
   maxHatch = max(minHatch,hatchingB);
   maxHatch = max(minHatch,hatchingG);

   float totalBlend  = vertexOut.blendC + vertexOut.blendA  + vertexOut.blendB +vertexOut.blendG;
	    
   /*hatchingC = hatchingC * (1.0 + texCoordZC * 2)/3;
   hatchingA = hatchingA * (1.0 + texCoordZA * 2)/3;
   hatchingB = hatchingB * (1.0 + texCoordZB * 2)/3;
   hatchingG = hatchingG * (1.0 + texCoordZG * 2)/3;*/

   color.rgb = (hatchingC + hatchingA + hatchingB + hatchingG) / totalBlend;

   /*if(minIntensity < 0.1){
			color.rgb  = mix(minHatch, maxHatch,(minIntensity + 3.5 )*5);
   }*/

  // color.rgb = mix(color.rgb)
   color.a = 1;
}