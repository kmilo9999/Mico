#version 430 core
layout(triangles) in;
layout(triangles, max_vertices = 3) out;

// constant values for the whole mesh.
uniform mat4 ModelMatrix;
uniform mat4 ViewMatrix;
uniform mat4 ProjectionMatrix;
uniform vec3 lightPos;

out VertexData {
    vec2 texCoord;
    vec3 normal;
} VertexOut;
 

void main(){

  vec3 P0 = gl_in[0].gl_Position.xyz;
  vec3 P1 = gl_in[1].gl_Position.xyz;
  vec3 P2 = gl_in[2].gl_Position.xyz;

  vec3 V0 = P1 - P0;
  vec3 V1 = P2 - P0;
  vec3 N = cross(V0, V1);
  
  N = normalize(N);
  
  // Center of the triangle
  vec3 P = (P0+P1+P2) / 3.0;
  vec3 L = lightPos - P;

  float dotLN = dot(L,N);
  vec3  B  = normalize(L - N * dotLN  );
  vec3  T  = cross(B,N);

  
  for(int i = 0; i < gl_in.length(); i++)
  {
    
	vec4 position = ProjectionMatrix * ViewMatrix * ModelMatrix  * gl_in[i].gl_Position;
    gl_Position = position;
    VertexOut.texCoord.s =  max(0,dot(gl_in[i].gl_Position.xyz, T));
	VertexOut.texCoord.t = max(0,dot(gl_in[i].gl_Position.xyz, B));
 
    // done with the vertex
    EmitVertex();
  }


}