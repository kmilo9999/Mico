#version 430 core
layout(triangles_adjacency) in;
layout(triangle_strip, max_vertices = 3) out;

// constant values for the whole mesh.

uniform mat4 ViewMatrix;
uniform mat4 ProjectionMatrix;
uniform vec3 lightPos;

in VertexData
{
    vec3 normal;
	vec3 fragpos;
	vec2 textCoord;
} vertex[];

out FragmentVertexData
{
    vec3 normal;
	vec3 fragpos;
	vec2 texCoord;
} VertexOut;
 

void main(){

  vec3 P0 = gl_in[0].gl_Position.xyz;
  vec3 P1 = gl_in[2].gl_Position.xyz;
  vec3 P2 = gl_in[4].gl_Position.xyz;

  /*vec3 V0 = P1 - P0;
  vec3 V1 = P2 - P0;
  vec3 N = cross(V0, V1);
  N  =  normalize(N);*/
  

  gl_Position = ProjectionMatrix * ViewMatrix * vec4(P0,1);
  VertexOut.normal = vertex[0].normal;
  VertexOut.fragpos = vertex[0].fragpos;
  VertexOut.texCoord = vertex[0].textCoord;
  EmitVertex();

  // position was already multiplied by the model matrix in the vertex shader
  gl_Position = ProjectionMatrix * ViewMatrix *  vec4(P1,1);
  VertexOut.normal = vertex[2].normal;
  VertexOut.fragpos = vertex[2].fragpos;
  VertexOut.texCoord = vertex[2].textCoord;
  EmitVertex();

  gl_Position = ProjectionMatrix * ViewMatrix * vec4(P2,1);
  VertexOut.normal = vertex[4].normal;
  VertexOut.fragpos = vertex[4].fragpos;
  VertexOut.texCoord = vertex[4].textCoord;
  EmitVertex();

  EndPrimitive();

  


}