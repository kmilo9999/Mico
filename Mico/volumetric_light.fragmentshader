#version 330 core

  
struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};


in vec2 TexCoords;

// uniform sampler2D screenTexture;
uniform sampler2D positionMap; 
uniform sampler2D normalMap;
uniform sampler2D diffuseMap;
uniform sampler2D specularMap;
uniform sampler2D shininessMap;
uniform sampler2D textureMap;
//uniform sampler2D depthMap;
uniform sampler2D shadowMap;

uniform vec3 ViewPos;
uniform vec3 ambient;
uniform Light light;

uniform float width;
uniform float height;
uniform mat4 ShadowMatrix;


float NB_STEPS = 3.0f;
int NB_STEPS_INT = 3;
float G_SCATTERING = 0.7f;

float PI = 3.141516f;

out vec4 fragColor;

bool ShadowCalculation(vec3 position)
{
	vec4 shadowCoord = ShadowMatrix * vec4(position,1);
	vec2 shadowIndex = shadowCoord.xy/shadowCoord.w;
	bool shadow = false;
	if( (shadowCoord.w > 0.0) && ( (shadowIndex.x > 0.0 && shadowIndex.x < 1.0) && (shadowIndex.y > 0.0 && shadowIndex.y < 1.0) ) ){
	    float lightDepth = texture(shadowMap, shadowIndex).w;
	    float pixelDepth = shadowCoord.w;
		float bias = 0.005;
	    shadow = pixelDepth - lightDepth > bias  ? true : false;
	}
	 

	return shadow;
}


float ComputeScattering(float lightDotView)
{
  float result = 1.0f - G_SCATTERING * G_SCATTERING;
  result /=  (4.0f * PI * pow(1.0f + G_SCATTERING * G_SCATTERING - (2.0f * G_SCATTERING) *    lightDotView, 1.5f));
  return result;
}


void main()
{ 
	
	vec2 texCoord = vec2(gl_FragCoord.x/width,gl_FragCoord.y/height);
    vec3 worldPosition = texture2D(positionMap,texCoord).xyz;
	vec3 startPosition = ViewPos;

	vec3 rayVector = worldPosition.xyz- startPosition;
	float rayLength = length(rayVector);
	vec3 rayDirection = normalize(rayVector);
	float stepLength = rayLength / NB_STEPS;
	vec3 step = rayDirection * stepLength;

	vec3 currentPosition = startPosition;

	vec3 accumFog = vec3(0.0f);
	for(int i = 0;  i < NB_STEPS_INT; i++)
	{
	  //bool shadow = ShadowCalculation(currentPosition);
	  accumFog += ComputeScattering(dot(rayDirection, light.position)) * light.diffuse;
	  /*if(!shadow)
	  {
		accumFog += ComputeScattering(dot(rayDirection, light.position)) * light.diffuse;
		//accumFog +=  light.diffuse;
	  }*/
	  currentPosition += step;
	}
	
	accumFog /= NB_STEPS;

	fragColor = vec4(accumFog, 1);

}