#version 430 core

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};


uniform Material material;
uniform Light light;
in vec3 fragmentColor;
in vec2 TextCoord;
in vec3 norm;
in vec3 FragPos;
uniform bool hasTexture;

out vec4 color;
uniform sampler2D texture;
uniform float AmbientFactor;
uniform float LightIntensity;
uniform vec3 LightPos;
uniform vec3 LightColor;
uniform vec3 ViewPos;

//shadow calculation
uniform sampler2D shadowMap;
in vec4 shadowCoord;

bool ShadowCalculation(vec4 shadowCoord)
{
     vec2 shadowIndex = shadowCoord.xy/shadowCoord.w;
	 float lightDepth = texture(shadowMap, shadowIndex).w;
	 float pixelDepth = shadowCoord.w;
     
     bool shadow = false ;
     if( (shadowCoord.w > 0.0) && ( (shadowIndex.x > 0.0 && shadowIndex.x < 1.0) && (shadowIndex.y > 0.0 && shadowIndex.y < 1.0) ) ){
		shadow = pixelDepth > lightDepth  ? true : false;
	 }

     return shadow;
}


void main(){
  
  
  // color of the object
  vec3 objectColor = vec3(1.0f, 0.5f, 0.31f);


  // color from the texture, temporaly unused
  if(hasTexture)
  {
    objectColor = texture(texture, TextCoord).rgb;
  }
    
  
  // Ambient
  
  vec3 ambient = material.ambient * light.ambient;

  vec3 normal = normalize(norm);
  vec3 lightDir = normalize(light.position - FragPos);  
  float diff = clamp(dot(lightDir,normal), 0, 1);
  vec3 diffuse = (diff * material.diffuse) * light.diffuse;

  vec3 viewDir = normalize(ViewPos - FragPos);
  vec3 reflectDir = reflect(-lightDir, norm);  
  float spec = 0;
  if(diff > 0)
  {
    spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  }
  
  vec3 specular = ( spec * material.specular) *   light.specular; 

 
  // shadow calculations
  bool shadow = ShadowCalculation (shadowCoord);

  if(!shadow)
  {
    vec3 nColor = (ambient + (diffuse + specular)) * objectColor;
    color = vec4(nColor,1.0);
  }
  else
  {
    color = vec4(vec3(0,0,0),1.0);
  }

  vec2 shadowIndex = shadowCoord.xy/shadowCoord.w;
	 float lightDepth = texture(shadowMap, shadowIndex).w;
	 float pixelDepth = shadowCoord.w;
  // color = vec4(pixelDepth/100.0,pixelDepth/100.0,pixelDepth/100.0,1);
  //color = vec4(lightDepth/100.0,lightDepth/100.0,lightDepth/100.0,1); 

}