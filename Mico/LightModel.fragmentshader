#version 430 core

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};


uniform Material material;
uniform Light light;
in vec3 fragmentColor;
in vec2 TextCoord;
in vec3 norm;
in vec3 FragPos;
uniform bool hasTexture;

out vec4 color;
uniform sampler2D textureColor;
uniform float AmbientFactor;
uniform float LightIntensity;
uniform vec3 LightPos;
uniform vec3 LightColor;
uniform vec3 ViewPos;
uniform bool isGround;

//shadow calculation
uniform sampler2D shadowMap;
in vec4 shadowCoord;

bool ShadowCalculation(vec4 projectionCoord)
{
     vec2 shadowIndex = projectionCoord.xy/projectionCoord.w;
	
     
	 bool shadow = false;
	 if( (projectionCoord.w > 0.0) && ( (shadowIndex.x > 0.0 && shadowIndex.x < 1.0) && (shadowIndex.y > 0.0 && shadowIndex.y < 1.0) ) ){
	    float lightDepth = texture(shadowMap, shadowIndex).w;
	    float pixelDepth = projectionCoord.w;
		float bias = 0.005;
	    shadow = pixelDepth - lightDepth > bias  ? true : false;
	 }
	 

     return shadow;
}


void main(){
  
  
  // color of the object
  vec3 objectColor = vec3(1.0f, 0.5f, 0.31f);


  // color from the texture
  if(hasTexture)
  {
        if(isGround)
		{
			objectColor = texture(textureColor, TextCoord).rgb;
		}
  }
  
  
  // Ambient
  
  vec3 ambient = light.ambient * material.ambient ;

  vec3 normal = normalize(norm);
  vec3 lightDir = normalize(light.position - FragPos);  
  
  float diff = max(dot(lightDir,normal), 0.0);
  vec3 diffuse = light.diffuse * diff * material.diffuse ;

  vec3 viewDir = normalize(ViewPos - FragPos);
  vec3 reflectDir = reflect(-lightDir, normal);  

  vec3 halfwayDir = normalize(lightDir + viewDir );

  float spec = pow(max(dot(normal, halfwayDir), 0.0), material.shininess);
  
  
  vec3 specular = light.specular * spec * material.specular ; 

 
  // shadow calculations
  bool shadow = ShadowCalculation (shadowCoord);


  if(!shadow)
  {
      
  vec3 nColor = (ambient + diffuse + specular) * objectColor;
	  color = vec4(nColor,1.0);
  }
  else
  {
  // I had to multiply by 0.5 because using only the ambient light was not enough to 
  // influence the color of the  occluded pixels
  vec3 nColor = (ambient) * objectColor * vec3(0.5); 
     color = vec4(nColor,1.0);
  }
 
 
}